{
  "name": "testing-differ",
  "type": "registry:block",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [
    "button",
    "input",
    "label",
    "select"
  ],
  "files": [
    {
      "path": "./components/github-tree-generator.tsx",
      "content": "import { useState } from 'react'\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n\ninterface GitHubTreeItem {\n  path: string\n  mode: string\n  type: string\n  size?: number\n  sha: string\n  url: string\n}\n\ninterface GitHubTreeResponse {\n  sha: string\n  url: string\n  tree: GitHubTreeItem[]\n  truncated: boolean\n}\n\ntype TreeNode = { [key: string]: TreeNode }\n\nexport function GithubTreeGenerator() {\n  const [repoUrl, setRepoUrl] = useState<string>('')\n  const [depth, setDepth] = useState<string>('3')\n  const [tree, setTree] = useState<string>('')\n  const [loading, setLoading] = useState<boolean>(false)\n  const [error, setError] = useState<string>('')\n\n  const fetchRepoStructure = async (owner: string, repo: string): Promise<GitHubTreeResponse> => {\n    try {\n      // Fetch repository metadata to get the default branch\n      const repoResponse = await fetch(`https://api.github.com/repos/${owner}/${repo}`)\n      if (!repoResponse.ok) {\n        throw new Error('Repository not found')\n      }\n      const repoData = await repoResponse.json()\n      const defaultBranch = repoData.default_branch\n\n      // Get the latest commit SHA of the default branch\n      const branchResponse = await fetch(\n        `https://api.github.com/repos/${owner}/${repo}/branches/${defaultBranch}`\n      )\n      if (!branchResponse.ok) {\n        throw new Error('Branch not found')\n      }\n      const branchData = await branchResponse.json()\n      const commitSha = branchData.commit.sha\n\n      // Get the commit object to retrieve the tree SHA\n      const commitResponse = await fetch(\n        `https://api.github.com/repos/${owner}/${repo}/git/commits/${commitSha}`\n      )\n      if (!commitResponse.ok) {\n        throw new Error('Commit not found')\n      }\n      const commitData = await commitResponse.json()\n      const treeSha = commitData.tree.sha\n\n      // Fetch the tree using the tree SHA\n      const treeResponse = await fetch(\n        `https://api.github.com/repos/${owner}/${repo}/git/trees/${treeSha}?recursive=1`\n      )\n      if (!treeResponse.ok) {\n        throw new Error('Tree not found')\n      }\n      return treeResponse.json()\n    } catch (error) {\n      console.error('Error fetching repository structure:', error)\n      throw new Error('Failed to fetch repository structure')\n    }\n  }\n\n  const generateTree = (data: GitHubTreeResponse, maxDepth: number): string => {\n    const tree: TreeNode = {}\n    data.tree.forEach((item: GitHubTreeItem) => {\n      const parts = item.path.split('/')\n      let current = tree\n      parts.forEach((part: string, index: number) => {\n        if (index < maxDepth) {\n          if (!current[part]) {\n            current[part] = {}\n          }\n          current = current[part]\n        }\n      })\n    })\n\n    const renderTree = (node: TreeNode, prefix = ''): string => {\n      let result = ''\n      const entries = Object.entries(node)\n      entries.forEach(([key, value], index) => {\n        const isLast = index === entries.length - 1\n        result += `${prefix}${isLast ? '└── ' : '├── '}${key}\\n`\n        if (Object.keys(value).length > 0) {\n          result += renderTree(value, `${prefix}${isLast ? '    ' : '│   '}`)\n        }\n      })\n      return result\n    }\n\n    return renderTree(tree)\n  }\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    setLoading(true)\n    setError('')\n    setTree('')\n\n    try {\n      const url = new URL(repoUrl)\n      const pathParts = url.pathname.split('/').filter(Boolean)\n      const [owner, repo] = pathParts\n      if (!owner || !repo) {\n        throw new Error('Invalid repository URL format.')\n      }\n      const data = await fetchRepoStructure(owner, repo)\n      const generatedTree = generateTree(data, parseInt(depth))\n      setTree(generatedTree)\n    } catch (err) {\n      console.error(err)\n      setError('Failed to generate tree. Please check the repository URL and try again.')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">GitHub Repository Tree Generator</h1>\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"repoUrl\">GitHub Repository URL</Label>\n          <Input\n            id=\"repoUrl\"\n            type=\"url\"\n            placeholder=\"https://github.com/owner/repo\"\n            value={repoUrl}\n            onChange={(e) => setRepoUrl(e.target.value)}\n            required\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"depth\">Tree Depth</Label>\n          <Select value={depth} onValueChange={setDepth}>\n            <SelectTrigger id=\"depth\">\n              <SelectValue placeholder=\"Select depth\" />\n            </SelectTrigger>\n            <SelectContent>\n              {[1, 2, 3, 4, 5].map((n) => (\n                <SelectItem key={n} value={n.toString()}>\n                  {n}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <Button type=\"submit\" disabled={loading}>\n          {loading ? 'Generating...' : 'Generate Tree'}\n        </Button>\n      </form>\n      {error && <p className=\"text-red-500 mt-4\">{error}</p>}\n      {tree && (\n        <pre className=\"mt-4 p-4 bg-gray-100 rounded overflow-x-auto\">\n          <code>{tree}</code>\n        </pre>\n      )}\n    </div>\n  )\n}\n",
      "type": "registry:block"
    }
  ],
  "tailwind": {},
  "cssVars": {},
  "meta": {}
}
